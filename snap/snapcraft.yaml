name: zwave-js-ui
base: core24
version: "v9.29.0"
summary: Full-featured Z-Wave Control Panel and MQTT Gateway.
description: |
  Full-featured Z-Wave Control Panel and MQTT Gateway compatible with all known 500 and 
  700 series Z-Wave controller hardware adapters, Z-Wave JS runs on almost anything with 
  a little bit of computing power and a serial port.

  # Main features
  - Control Panel UI: Directly control your nodes and their values from the UI, including:
    - Nodes management: Add, remove, and configure all nodes in your Z-Wave network
    - Firmware updates: Update device firmware using manufacturer-supplied firmware files
    - Groups associations: Add, edit, and remove direct node associations
    - Z-Wave JS Exposed: Provides full-access to Z-Wave JS's APIs
  - Full-Featured Z-Wave to MQTT Gateway: Expose Z-Wave devices to an MQTT broker in a 
    fully configurable manner
  - Secured: Supports HTTPS and user authentication
  - Scene Management: Create scenes and trigger them by using MQTT apis (with timeout 
    support)
  - Debug Logs in the UI: See debug logs directly from the UI
  - Access Store Files in the UI: Access the files are stored in the persistent store 
    folder directly from the UI
  - Network Graph: Provides a beautiful map showing how nodes are communicating with the 
    controller
  - Supports the Official Home Assistant Integration: Can act as the backend driver for 
    the official Home Assistant integration, using the same driver and socket server as 
    the official addon
  - Supports Home Assistant Discovery via MQTT: In lieu of the official integation, can 
    be used to expose Z-Wave devices to Home Assistant via MQTT discovery.
  - Supported by Domoticz (beta 2021.1): Using MQTT Autodiscovery.
  - Automatic/Scheduled backups: Scheduled backup of NVM and store directory. It's also 
    possible to enable automatic backups of NVM before every node inclusion/exclusion/
    replace, this ensures to create a safe restore point before any operation that can 
    cause a network corruption.

  ## Additions with the snap
  - Command to read the log from the terminal independent of if you're logging to file or not
  - Plugs for the `code-server` snap, if you want a full-fledge editor experience for the «store-folder»

  # Auto-connections
  - `raw-usb`: To access USB devices, such as Z-wave controller dongles
  - `hardware-observe`: To observe your system for devices, to easily find them in the UI

  **Note:** None of these connections are necessary to run the app, so you can disconnect them as you like, but please note that it might
    change the experience within the software.

grade: stable
confinement: strict
license: MIT
#assumes:
#  - command-chain

platforms:
  amd64:
  arm64:
  armhf:

#architectures:
#  - build-on: amd64
#    build-for: amd64
#  - build-on: arm64
#    build-for: arm64
#  - build-on: arm64
#    build-for: armhf

apps:
  zwave-js-ui:
    daemon: simple
    restart-condition: always
    environment:
      STORE_DIR: $SNAP_DATA
      ZWAVEJS_EXTERNAL_CONFIG: $SNAP_DATA/.ext-config
      DAEMONIZED: 1
      npm_config_cache: /usr/local/share/.cache/npm
    command: bin/zwave-js-ui 
    command-chain:
      - helper/env-wrapper
    plugs:
      - network
      - network-bind
      - raw-usb
      - serial-port
      - hardware-observe
      - log-observe
  exec:
    environment:
      STORE_DIR: $SNAP_DATA
      ZWAVEJS_EXTERNAL_CONFIG: $SNAP_DATA/.ext-config
    command: bin/zwave-js-ui 
    command-chain:
      - helper/env-wrapper
    plugs:
      - network
      - network-bind
      - raw-usb
      - serial-port
      - hardware-observe
  help:
    command: helper/env-wrapper --help
  enable:
    command: bin/daemonize
  disable:
    command: bin/de-daemonize
  restart:
    command: bin/restart

layout: 
  # Cache is set to (env) something outside the rw mount, to prevent storing it inside the store dir.
  /usr/local/share/.cache/npm:
    bind: $SNAP/.cache/npm
  #/usr/local/share/.yarn: ?? Do we need this? Leave until proper testing is OK
    #symlink: $SNAP/lib/node_modules

slots: # ZUI offers new config dir within data (e.g for code-server snap)
  store-dir:
    interface: content
    content: vscs-content
    write:
      - $SNAP_DATA

parts:
  zwave-js-ui:
    after: [dependencies]
    plugin: npm 
    npm-include-node: true
    npm-node-version: 20.15.1
    build-environment:
      - DEBUG_BUILD: "True"
      - NODE_VERSION: 20.15.1
    source: https://github.com/zwave-js/zwave-js-ui.git
    source-tag: $SNAPCRAFT_PROJECT_VERSION
    build-packages:
      - gcc
      - build-essential
    override-build: |
      if [ "${DEBUG_BUILD}" == True ]; then
        echo "DEBUG"
      fi
      if [ ! -f "${CRAFT_PART_INSTALL}/bin/node" ]; then
        case ${CRAFT_ARCH_BUILD_ON} in
          amd64)
            NODE_ARCH=x64
            ;;
          armhf)
            NODE_ARCH=armv7l
            ;;
          *)
            NODE_ARCH=${CRAFT_ARCH_BUILD_ON}
            ;;
        esac
          
        curl -s "https://nodejs.org/dist/v${NODE_VERSION}/node-v${NODE_VERSION}-linux-${NODE_ARCH}.tar.gz" | \
          tar xzf - -C "${CRAFT_PART_INSTALL}/" --no-same-owner --strip-components=1
      fi

      # For some reasons seems that snapcraft sets NODE_ENV to `production` by default
      # this causes the build to fail as devDependencies are not installed
      npm ci --include=dev

      npm run build:server

      npm run build:ui
      npm prune --omit=dev
      craftctl default
      if [ "${DEBUG_BUILD}" == True ]; then
        echo "process.on(\"warning\", (warning) => { console.warn(\"Node.js warning: \" + warning.stack);});" >> "${CRAFT_PART_INSTALL}/bin/zwave-js-ui"
      fi
      cp --force --archive --link --no-dereference "${CRAFT_PART_BUILD}/.git" "${CRAFT_PART_INSTALL}"
    organize:
      .git: lib/node_modules/zwave-js-ui/.git
    stage-packages:
      - on armhf:
        - libatomic1
    stage:
      - -bin/corepack
      - -bin/npx
      - -lib/node_modules/corepack
      - -lib/node_modules/npx

  dependencies:
    plugin: nil
    stage-snaps:
      - jq
      - yq
    stage-packages:
      - git
      - udev
      - iproute2

  local:
    after: [dependencies]
    plugin: dump
    source: src/
    stage-packages:
      - uuid
    organize:
      hooks: snap/hooks
