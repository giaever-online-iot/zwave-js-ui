name: zwave-js-ui
base: core20
version: 'v8.14.2'
summary: Full-featured Z-Wave Control Panel and MQTT Gateway.
description: |
  Full-featured Z-Wave Control Panel and MQTT Gateway compatible with all known 500 and 
  700 series Z-Wave controller hardware adapters, Z-Wave JS runs on almost anything with 
  a little bit of computing power and a serial port.

  # Main features
  - Control Panel UI: Directly control your nodes and their values from the UI, including:
    - Nodes management: Add, remove, and configure all nodes in your Z-Wave network
    - Firmware updates: Update device firmware using manufacturer-supplied firmware files
    - Groups associations: Add, edit, and remove direct node associations
    - Z-Wave JS Exposed: Provides full-access to Z-Wave JS's APIs
  - Full-Featured Z-Wave to MQTT Gateway: Expose Z-Wave devices to an MQTT broker in a 
    fully configurable manner
  - Secured: Supports HTTPS and user authentication
  - Scene Management: Create scenes and trigger them by using MQTT apis (with timeout 
    support)
  - Debug Logs in the UI: See debug logs directly from the UI
  - Access Store Files in the UI: Access the files are stored in the persistent store 
    folder directly from the UI
  - Network Graph: Provides a beautiful map showing how nodes are communicating with the 
    controller
  - Supports the Official Home Assistant Integration: Can act as the backend driver for 
    the official Home Assistant integration, using the same driver and socket server as 
    the official addon
  - Supports Home Assistant Discovery via MQTT: In lieu of the official integation, can 
    be used to expose Z-Wave devices to Home Assistant via MQTT discovery.
  - Supported by Domoticz (beta 2021.1): Using MQTT Autodiscovery.
  - Automatic/Scheduled backups: Scheduled backup of NVM and store directory. It's also 
    possible to enable automatic backups of NVM before every node inclusion/exclusion/
    replace, this ensures to create a safe restore point before any operation that can 
    cause a network corruption.

  ## Additions with the snap
  - Command to read the log from the terminal independent of if you're logging to file or not
  - Plugs for the `code-server` snap, if you want a full-fledge editor experience for the «store-folder»

  # Auto-connections
  - `raw-usb`: To access USB devices, such as Z-wave controller dongles
  - `hardware-observe`: To observe your system for devices, to easily find them in the UI

  **Note:** None of these connections are necessary to run the app, so you can disconnect them as you like, but please note that it might
    change the experience within the software.

grade: stable
confinement: strict
license: MIT
assumes:
  - command-chain
architectures:
  - build-on: amd64
  - build-on: arm64
  - build-on: armhf

apps:
  zwave-js-ui:
    daemon: simple
    restart-condition: always
    environment:
      STORE_DIR: $SNAP_DATA
      ZWAVEJS_EXTERNAL_CONFIG: $SNAP_DATA/.ext-config
      DAEMONIZED: 1
    command: bin/yarn start
    command-chain:
      - helper/env-wrapper
    plugs:
      - network
      - network-bind
      - raw-usb
      - serial-port
      - hardware-observe
      - log-observe
  exec:
    environment:
      STORE_DIR: $SNAP_DATA
      ZWAVEJS_EXTERNAL_CONFIG: $SNAP_DATA/.ext-config
    command: bin/yarn start
    command-chain:
      - helper/env-wrapper
    plugs:
      - network
      - network-bind
      - raw-usb
      - serial-port
      - hardware-observe
  help:
    command: helper/env-wrapper --help
  enable:
    command: bin/daemonize
  disable:
    command: bin/de-daemonize
  restart:
    command: bin/restart

layout:
  /usr/local/share/.cache/yarn:
    bind: $SNAP/.cache/yarn
  /usr/local/share/.yarn:
    symlink: $SNAP/lib/node_modules

slots: # ZUI offers new config dir within data
  store-dir:
    interface: content
    content: vscs-content
    write:
      - $SNAP_DATA

parts:
  zwave-js-ui:
    after: [nodejs, dependencies]
    plugin: dump
    source: https://github.com/zwave-js/zwave-js-ui.git
    source-branch: "feat#2871"
    #source-tag: "v7.1.0"
    #source-tag: $SNAPCRAFT_PROJECT_VERSION
    build-packages:
      - gcc
      - build-essential

    build-environment:
      - LD_LIBRARY_PATH: "${LD_LIBRARY_PATH}:$(dirname $(find ${SNAPCRAFT_STAGE} -name libonig.so.2 -print0))"
      - PATH: "${PATH}:${SNAPCRAFT_PART_BUILD}/bin"
    override-build: |
      # Used when testing an unreleased version of Z-wavejs
      # sed -i 's/"zwave-js".*$/"zwave-js"\: "10.0.5-0-pr-4836-ed10b36"/g' ${SNAPCRAFT_PART_BUILD}/package.json

      # Link the bundled yarn 
      cd "${SNAPCRAFT_PART_BUILD}/bin"
      YARN="$(find ${SNAPCRAFT_PART_BUILD} -name yarn-*.cjs -print0)"
      ln -s "../${YARN:${#SNAPCRAFT_PART_BUILD}+1}" ./yarn
      chmod +x ./yarn
      cd "${SNAPCRAFT_PART_BUILD}"

      # Necessary for the remote build; sometimes.
      if [ -n "${http_proxy-}" ]; then
        yarn config set httpProxy "${http_proxy}"
      fi
      if [ -n "${https_proxy-}" ]; then
        yarn config set httpsProxy "${https_proxy}"
      fi

      yarn install
      yarn build:server
      yarn build:ui
      yarn remove $(cat "${SNAPCRAFT_PART_BUILD}/package.json" | jq -r '.devDependencies | keys | join(" ")')
      
      # Copy built version into install directory
      mkdir -p "${SNAPCRAFT_PART_INSTALL}/lib/" \
        && cp --archive --link --no-dereference "${SNAPCRAFT_PART_BUILD}" \
          "${SNAPCRAFT_PART_INSTALL}/lib/zwave-js-ui"
      
      # Link yarn in install directory
      mkdir "${SNAPCRAFT_PART_INSTALL}/bin" \
        && cd "${SNAPCRAFT_PART_INSTALL}/bin" \
        && ln -s "../lib/zwave-js-ui/bin/yarn" "yarn"

    filesets:
      zwave-js-ui-include:
        - bin
        - lib/zwave-js-ui/.git
        - lib/zwave-js-ui/*.md
        - lib/zwave-js-ui/bin/yarn
        - lib/zwave-js-ui/dist
        - lib/zwave-js-ui/hass
        - lib/zwave-js-ui/node_modules
        - lib/zwave-js-ui/server
        - lib/zwave-js-ui/snippets
        - lib/zwave-js-ui/package.json
        - lib/zwave-js-ui/views
        - lib/zwave-js-ui/.yarn
        - lib/zwave-js-ui/yarn.lock
        - lib/zwave-js-ui/.yarnrc.yml
        - lib/zwave-js-ui/LICENSE
    stage:
      - $zwave-js-ui-include
  
  dependencies:
    plugin: nil
    stage-snaps:
      - jq
      - yq
    stage-packages:
      - git
      - udev
      - iproute2

  nodejs:
    plugin: dump
    source:
      - on amd64: https://nodejs.org/dist/v16.13.0/node-v16.13.0-linux-x64.tar.gz
      - on arm64: https://nodejs.org/dist/v16.13.0/node-v16.13.0-linux-arm64.tar.gz
      - on armhf: https://nodejs.org/dist/v16.13.0/node-v16.13.0-linux-armv7l.tar.gz
    stage-packages:
      - on armhf:
          - libatomic1
    organize:
      '*.md': nodejs/
      LICENSE: nodejs/
    prime:
      - -include
      - -share
      - -lib/node_modules
      - -bin/npm
      - -bin/npx
      - -bin/corepack
    override-stage: |
      corepack disable
      snapcraftctl stage

  local:
    plugin: dump
    source: src/
    stage-packages:
      - uuid
    organize:
      hooks: snap/hooks
