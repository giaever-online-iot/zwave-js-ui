name: PR Build Snap

on:
  pull_request:
    branches:
      - main

jobs:
  extract:
    runs-on: ubuntu-latest
    outputs:
      platforms: ${{ steps.extract.outputs.platforms }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        
      - name: Extract platforms from snapcraft.yaml
        id: extract
        run: |
          echo "Extract platforms from snapcraft.yaml"
          echo "platforms=$(yq e '.platforms | keys ' -o=j -I=0 snap/snapcraft.yaml)" >> $GITHUB_OUTPUT

  build:
    needs: extract
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: ${{ fromJson(needs.extract.outputs.platforms) }}
      fail-fast: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      - name: Get secret
        env:
          LAUNCHPAD_CREDENTIALS: ${{ secrets.LAUNCHPAD_CREDENTIALS }}
        run: |
          echo "LP AUTH: ${LAUNCHPAD_CREDENTIALS}"
      # - name: Setup QEMU
      #   uses: docker/setup-qemu-action@v3
      #   with:
      #     # see https://github.com/tonistiigi/binfmt/issues/215
      #     # also see: https://bugs.launchpad.net/ubuntu/+source/qemu/+bug/2096782
      #     image: 'tonistiigi/binfmt:master'

  #     - name: Build Snap for ${{ matrix.platform }}
  #       uses: canonical/snapcraft-multiarch-action@v1
  #       id: snapcraft
  #       with:
  #         architecture: ${{ matrix.platform }}

  #     - name: Get basename of snap package
  #       id: snap_fn
  #       run: |
  #         dpkg --print-architecture
  #         echo "${{ steps.snapcraft.outputs.snap }}"
  #         echo "filename=$(basename "${{ steps.snapcraft.outputs.snap }}")" >> $GITHUB_OUTPUT

  #     - uses: actions/upload-artifact@v4
  #       with:
  #         name: ${{ steps.snap_fn.outputs.filename }}
  #         path: ${{ steps.snapcraft.outputs.snap }}
          
  # post_comment:
  #   runs-on: ubuntu-latest
  #   needs: build
  #   if: ${{ success() }}
  #   steps:
  #     - name: Post artifact link comment
  #       run: |
  #         ARTIFACT_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts"
  #         COMMENT_BODY="âœ… All builds completed successfully. Download [artifacts]($ARTIFACT_URL)."
          
  #         curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
  #              -X POST \
  #              -d "{\"body\": \"${COMMENT_BODY}\"}" \
  #              "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments"
