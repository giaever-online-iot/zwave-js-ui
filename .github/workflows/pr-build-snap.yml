name: PR Build Snap

on:
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      platforms: ${{ steps.build.outputs.builds }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
        
      - name: Extract platforms from snapcraft.yaml
        id: extract
        run: |
          #platforms=$(yq 'with_entries(.value = {})' <<< yq e '.platforms | keys |= ..' -oj -I0 snap/snapcraft.yaml)
          #echo "platforms=$(yq e '.platforms | keys ' -o=j -I=0 snap/snapcraft.yaml)" >> $GITHUB_OUTPUT
          #echo "platforms=$(echo "{'platforms': {'amd64': null}}" | yq e '.platforms | keys ' -o=j -I=0)" >> $GITHUB_OUTPUT

          echo "platforms=$(yq '.platforms | keys |= ..' -oj -I0 snap/snapcraft.yaml | yq 'with_entries(.value = {})' -oj -I0)" >> $GITHUB_OUTPUT

      - name: Build for ${{ steps.extract.outputs.platforms }}
        id: build
        run: |
          set -x
          platforms="$(echo ${{ steps.extract.outputs.platforms }})"
          #echo ${{ steps.extract.outputs.platforms }} | yq '.' -oj
          #yq '.' -oj <<< "${{ steps.extract.outputs.platforms }}"
          #platforms="$(echo ${{ steps.extract.outputs.platforms }} | yq '.' -oj)"
          #yq '. | keys | join(",")' <<< $platforms 
          exit 1
          #sudo snap install snapcraft --classic
          #export SNAPCRAFT_STORE_CREDENTIALS="${{ secrets.SNAPCRAFT_STORE_CREDENTIALS }}"
          #snapcraft whoami
          #mkdir -p ~/.local/share/snapcraft
          #echo "${{ secrets.LAUNCHPAD_CREDENTIALS }}" > ~/.local/share/snapcraft/launchpad-credentials
          #snapcraft remote-build -v --launchpad-accept-public-upload \
          #  --build-for=$(yq '. | keys | join(",")' <<< $platforms) #\
          #  #--launchpad-timeout=900

          #for p in $(echo "${platforms}" | yq '. | keys | join(" ")'); do 
          #  platforms=$(echo $platforms | path=".${p}.snf" val="$(ls -d "${PWD}"/zwave-js-ui*_${p}.snap)" yq 'eval(strenv(path)) = strenv(val)')
          #  platforms=$(echo $platforms | path=".${p}.lfn" val="$(ls -d "${PWD}"/snapcraft-*_${p}_*.txt)" yq 'eval(strenv(path)) = strenv(val)')
          #done

          #echo "platforms=$(echo "${platforms}" | yq '.' -oj -I0)" >> $GITHUB_OUTPUT

  upload:
    needs: build 
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: ${{ fromJson(needs.build.outputs.platforms) }}
      fail-fast: true
    steps:
      - name: For build platform
        run: |
          echo "${{ matrix.platform }}"
          echo "${{ matrix.platform }}" | yq '.' -oj -I2
          ls -al ./
#      - name: Checkout code
#        uses: actions/checkout@v5
#    
#      - name: Setup QEMU
#        uses: docker/setup-qemu-action@v3
#        with: 
#          # see 
#          # https://github.com/tonistiigi/binfmt/issues/215
#          # https://bugs.launchpad.net/ubuntu/+source/qemu/+bug/2096782
#          image: 'tonistiigi/binfmt:master'
#
#      - name: Build Snap for ${{ matrix.platform }}
#        uses: canonical/snapcraft-multiarch-action@v1
#        id: snapcraft
#        with:
#          architecture: ${{ matrix.platform }}
#
#      - name: Get basename of snap package
#        id: build
#        run: |
#          mkdir -p pkg/ && mv -f "${{ steps.snapcraft.outputs.snap }}" "pkg/"
#          echo "filename=$(basename "${{ steps.snapcraft.outputs.snap }}")" >> $GITHUB_OUTPUT
#
#      - uses: actions/upload-artifact@v5
#        id: upload
#        with:
#          name: ${{ steps.build.outputs.filename }}
#          path: ${{ github.workspace }}/pkg
#
#      - name: Persist artifact URL to env
#        id: snap
#        run: | 
#          FINFO="$(FN="${{ steps.build.outputs.filename}}" && echo "${FN%.*}").json"
#          echo "${FINFO}"
#          echo "{'name': '${{ steps.build.outputs.filename }}', 'url': '${{ steps.upload.outputs.artifact-url }}', 'arch': '${{ matrix.platform }}'}" | yq '.' -oj -I0 > "pkg/${FINFO}"
#          echo "finfo=${FINFO}" >> $GITHUB_OUTPUT
#
#      - run: echo "${{ steps.snap.outputs.finfo }}"
#
#      - uses: actions/upload-artifact@v5
#        with:
#          name: ${{ steps.snap.outputs.finfo }}
#          path: ${{ github.workspace }}/pkg
#          
#  post_comment_and_notify:
#    runs-on: ubuntu-latest
#    needs: build
#    if: ${{ always() }}
#    steps:
#      - name: Download artifacts
#        if: ${{ success() }}
#        uses: actions/download-artifact@v6
#        with:
#          path: ./pkg
#      - name: Aggregate artifact infos
#        if: ${{ success() }}
#        id: aggregate
#        run: |
#          JSONS="$(find ./ -type f -name "*.json")"
#          echo "${JSONS}"
#          echo "Packages built successfully!" > filelist.md
#          for sfi in ${JSONS}; do
#            echo "- $(cat "${sfi}" | yq '.arch'): [$(cat "${sfi}" | yq '.name')]($(cat "${sfi}" | yq '.url'))" >> filelist.md
#          done
#
#          echo "filelist<<EOF" >> $GITHUB_OUTPUT
#          cat filelist.md >> $GITHUB_OUTPUT
#          echo "EOF" >> $GITHUB_OUTPUT
#
#      - name: Post success comment
#        if: ${{ success() }}
#        uses: peter-evans/create-or-update-comment@v5
#        with:
#          issue-number: ${{ github.event.pull_request.number }}
#          body: ${{ steps.aggregate.outputs.filelist }}
#
#      - name: Post failure comment
#        if: ${{ failure() }}
#        uses: peter-evans/create-or-update-comment@v5
#        with:
#          issue-number: ${{ github.event.pull_request.number }}
#          body: |
#            Hey @${{ github.event.pull_request.user.login }}, the build has failed.  
#            Please check the build logs and update your PR accordingly.
#
#
#      - name: Get repo collaborators with write or higher access
#        if: ${{ success() }}
#        id: get_collaborators
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        run: |
#          coll=$(curl -s \
#            -H "Authorization: Bearer $GITHUB_TOKEN" \
#            -H "Accept: application/vnd.github+json" \
#            "https://api.github.com/repos/${{ github.repository }}/collaborators?per_page=10")
#          echo "${coll}"
#          rev=$(echo "$coll" | jq -r '.[] | select(.permissions.push == true or .permissions.admin == true or .permissions.maintain == true) | .login' | paste -sd "," -)
#          echo "${rev}"
#          echo "reviewers=$rev" >> $GITHUB_OUTPUT
#
#      - name: Assign reviewers on PR
#        if: ${{ success() }}
#        uses: hkusu/review-assign-action@v1
#        with:
#          reviewers: ${{ steps.get_collaborators.outputs.reviewers }}
#          github-token: ${{ secrets.GITHUB_TOKEN }}
#
#      - name: Assign reviewers on PR
#        if: ${{ failure() }}
#        uses: hkusu/review-assign-action@v1
#        with:
#          reviewers: ""
#          github-token: ${{ secrets.GITHUB_TOKEN }}
