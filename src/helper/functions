#!/usr/bin/env bash

export ZWAVE_JS_CONF="${SNAP}/lib/node_modules/zwave-js-ui/node_modules/@zwave-js/config"

if [ -z "${DAEMONIZED}" ]; then
    DAEMONIZED=0
fi

function lprint {
    if [ ${DAEMONIZED} -eq 0 ]; then
        echo ${1}
    else
        logger "${SNAP_NAME}: ${1}"
    fi
}

function plug_connected {
    if ! snapctl is-connected "${1}"; then
        lprint "Missing plug: «${1}»"
	    lprint "Connect with:"
        if [ "${1}" == "serial-port" ]; then
            lprint "$ sudo snap connect ${SNAP_NAME}:${1} <slot name>"
        else
            lprint "$ sudo snap connect ${SNAP_NAME}:${1}"
        fi
        return 1
    fi
    return 0
}

function plugs_connected {
    MISSING=0

    RAW_OUT=$(plug_connected "raw-usb")
    RAW_RES=$?

    SERIAL_OUT=$(plug_connected "serial-port")
    SERIAL_RES=$?

    if [ $RAW_RES -ne 0 -a $SERIAL_RES -ne 0 ]; then
        lprint $RAW_OUT
        lprint "----- OR -----"
        lprint $SERIAL_OUT
        lprint "See ${SNAP_NAME}.help for more info on the serial-port plug"
        MISSING=1
    fi

    plug_connected "hardware-observe"
    if [ $? -ne 0 ]; then
        MISSING=1
    fi

    if [ $MISSING -ne 0 ]; then
        return 1
    fi

    return 0
}

function is_root {
    if [ ${EUID:-$(id -u)} -eq 0 ]; then
        return 0
    fi
    return 1
}

function require_root {
    is_root
    if [ $? -eq 1 ]; then
        lprint "Running as root is required." >&2
        lprint "Re-run with sudo."
        exit 1
    fi
}

function testnset_config {
    lprint "Testing ${1}, or setting ${2}"
    RES=$(snapctl get ${1})
    if [ $? -ne 0 ] || [ -z "${RES}" ]; then
        lprint "Setting ${1}=${2}"
        RES=$(snapctl set ${1}=${2})
        if [ $? -ne 0 ]; then
            lprint "${RES}"
            exit 1
        fi
        return 0
    fi
    return 0
}

function zui_settings_file {
    realpath -e "${SNAP_DATA}/settings.json" 2>&- | test_perm "${1}"
}

function test_perm {
    read -r F
    test -${1:-r} "${F}" && (echo "${F}" && return 0) || (echo "${F}" && return 1)
    return $?
}

function set_device_priority_dir {
    lprint ".zwave.deviceConfigPriorityDir: «${1:-None}»"
    DEV_DIR="${1}" yq -i '.zwave.deviceConfigPriorityDir = strenv(DEV_DIR)' "${2:-"$(zui_settings_file "w")"}" && return $?
}

function test_device_priority_dir {
    # set -x
    ZUI_SETTINGS=$(zui_settings_file "w")
    
    [ $? -ne 0 ] && echo "Cannot read/write to settings" && exit 1

    DEV_DIR=$(yq -re '.zwave.deviceConfigPriorityDir' "${ZUI_SETTINGS}" 2>&-)
    NDEV_DIR=${DEV_DIR}

    if [[ "${DEV_DIR}" =~ ^"$(dirname ${SNAP_DATA})" ]]; then
        NDEV_DIR=$(sed -E "s#$(dirname ${SNAP_DATA})/(current|x?[0-9]+)#${SNAP_DATA}#g" <<< $DEV_DIR)
    fi

    if [ -d "${NDEV_DIR}" ] && [ -r "${NDEV_DIR}" ]; then
        if [ "${NDEV_DIR}" != "${DEV_DIR}" ]; then
            set_device_priority_dir "${NDEV_DIR}" "${ZUI_SETTINGS}" || return $?
        fi
    elif [ ! -r "${NDEV_DIR}" ]; then
        set_device_priority_dir "" "${ZUI_SETTINGS}" || return $?
    fi

    if [ ! -w "${NDEV_DIR}" ]; then 
        lprint ".zwave.deviceConfigPriorityDir not writable: ${NDEV_DIR}"
    fi
    
    return 0
}

function test_default_config {
    testnset_config "server.host" "0.0.0.0"
    testnset_config "server.port" 8091

    testnset_config "server.ssl" false
    testnset_config "server.force-disable-ssl" false

    testnset_config "session.cookie-secure" $(snap get server.ssl)
    testnset_config "session.secret" $(uuid)

    testnset_config "mqtt.name" ""

    testnset_config "timezone" "Europe/Oslo"
}
